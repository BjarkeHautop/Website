stop("Error: x_value must be within the bounds [a, b].")
}
# Define the objective function to minimize
objective_function <- function(params) {
mu <- params[1]
sigma <- params[2]
# Penalize if parameters go out of bounds
if (mu <= a || mu >= b || sigma <= 0) {
return(Inf)
}
# Following syntax given on https://en.wikipedia.org/wiki/Truncated_normal_distribution
xi <- (x_value - mu) / sigma
alpha <- (a - mu) / sigma
beta <- (b - mu) / sigma
Z <- pnorm(beta) - pnorm(alpha)
mean_trunc <- mu + (dnorm(alpha) - dnorm(beta)) / Z * sigma
prob_trunc <- (pnorm(xi) - pnorm(alpha)) / Z
# Calculate the sum of squared differences
error <- (mean_trunc - desired_mean)^2 + (prob_trunc - desired_prob)^2
return(error)
}
library(numDeriv)
gradient_function <- function(params) {
mu <- params[1]
sigma <- params[2]
grad(objective_function, params)
}
# Optimize the parameters
result <- optim(initial_guess, objective_function, gradient = gradient_function,
method = "L-BFGS-B", control = list(maxit = 2000, abstol = 1e-6))
print(result)
# Check for convergence or failure
if (result$convergence != 0) {
warning("Optimization did not converge.")
}
# Extract the optimal parameters
optimal_mu <- result$par[1]
optimal_sigma <- result$par[2]
return(list(mu = optimal_mu, sigma = optimal_sigma))
}
solve_truncated_normal(10, 1, 0.2, maxit = 100000)
solve_truncated_normal <- function(desired_mean, x_value, desired_prob, a = 0,
b = Inf, initial_guess=c(desired_mean, 1), maxit=1000,
verbose=FALSE) {
"
This function solves for the parameters (mean and standard deviation) of a truncated normal
distribution such that the distribution aligns with a given desired mean and the cumulative
probability at a specific value.
Args:
desired_mean (numeric): The desired mean E[X] of the truncated normal distribution.
desired_prob (numeric): The desired cumulative probability P(X <= x_value) of the truncated normal distribution.
x_value (numeric): The value x for which the cumulative probability is specified.
a (numeric, optional): The lower bound of the truncation interval. Default is 0.
b (numeric, optional): The upper bound of the truncation interval. Default is Inf.
Initial_guess: The initial guess for the parameters used for optimizing. Default
is mean being the desired mean and sd being 1.
maxit: The maximum number of iterations allowed for optim. See also ?optim.
Returns:
list: A list containing the optimal mean (mu) and standard deviation (sigma) of the truncated normal distribution.
Useful for when defining prior distributions in Bayesian analysis, where you have a desired mean
and a specific belief about the probability of the parameter being at most x.
"
# Check for logical consistency and edge cases
if (a >= b) {
stop("Error: Lower bound 'a' must be less than upper bound 'b'.")
}
if (desired_mean <= a || desired_mean >= b) {
stop("Error: Desired mean must be within the bounds [a, b].")
}
if (desired_prob <= 0 || desired_prob >= 1) {
stop("Error: Desired probability must be between 0 and 1.")
}
if (x_value <= a || x_value >= b) {
stop("Error: x_value must be within the bounds [a, b].")
}
# Define the objective function to minimize
objective_function <- function(params) {
mu <- params[1]
sigma <- params[2]
# Penalize if parameters go out of bounds
if (mu <= a || mu >= b || sigma <= 0) {
return(Inf)
}
# Following syntax given on https://en.wikipedia.org/wiki/Truncated_normal_distribution
xi <- (x_value - mu) / sigma
alpha <- (a - mu) / sigma
beta <- (b - mu) / sigma
Z <- pnorm(beta) - pnorm(alpha)
mean_trunc <- mu + (dnorm(alpha) - dnorm(beta)) / Z * sigma
prob_trunc <- (pnorm(xi) - pnorm(alpha)) / Z
# Calculate the sum of squared differences
error <- (mean_trunc - desired_mean)^2 + (prob_trunc - desired_prob)^2
return(error)
}
# Optimize the parameters
result <- optim(initial_guess, objective_function, gradient = gradient_function,
method = "L-BFGS-B", control = list(maxit = 2000, abstol = 1e-6))
# Check for convergence or failure
if (result$convergence != 0) {
warning("Optimization did not converge.")
}
if (verbose) {
print(result)
}
# Extract the optimal parameters
optimal_mu <- result$par[1]
optimal_sigma <- result$par[2]
return(list(mu = optimal_mu, sigma = optimal_sigma))
}
solve_truncated_normal(10, 1, 0.2, maxit = 100000, verbose = T)
solve_truncated_normal <- function(desired_mean, x_value, desired_prob, a = 0,
b = Inf, initial_guess=c(desired_mean, 1), maxit=1000,
verbose=FALSE) {
"
This function solves for the parameters (mean and standard deviation) of a truncated normal
distribution such that the distribution aligns with a given desired mean and the cumulative
probability at a specific value.
Args:
desired_mean (numeric): The desired mean E[X] of the truncated normal distribution.
desired_prob (numeric): The desired cumulative probability P(X <= x_value) of the truncated normal distribution.
x_value (numeric): The value x for which the cumulative probability is specified.
a (numeric, optional): The lower bound of the truncation interval. Default is 0.
b (numeric, optional): The upper bound of the truncation interval. Default is Inf.
Initial_guess: The initial guess for the parameters used for optimizing. Default
is mean being the desired mean and sd being 1.
maxit: The maximum number of iterations allowed for optim. See also ?optim.
Returns:
list: A list containing the optimal mean (mu) and standard deviation (sigma) of the truncated normal distribution.
Useful for when defining prior distributions in Bayesian analysis, where you have a desired mean
and a specific belief about the probability of the parameter being at most x.
"
# Check for logical consistency and edge cases
if (a >= b) {
stop("Error: Lower bound 'a' must be less than upper bound 'b'.")
}
if (desired_mean <= a || desired_mean >= b) {
stop("Error: Desired mean must be within the bounds [a, b].")
}
if (desired_prob <= 0 || desired_prob >= 1) {
stop("Error: Desired probability must be between 0 and 1.")
}
if (x_value <= a || x_value >= b) {
stop("Error: x_value must be within the bounds [a, b].")
}
# Define the objective function to minimize
objective_function <- function(params) {
mu <- params[1]
sigma <- params[2]
# Penalize if parameters go out of bounds
if (mu <= a || mu >= b || sigma <= 0) {
return(Inf)
}
# Following syntax given on https://en.wikipedia.org/wiki/Truncated_normal_distribution
xi <- (x_value - mu) / sigma
alpha <- (a - mu) / sigma
beta <- (b - mu) / sigma
Z <- pnorm(beta) - pnorm(alpha)
mean_trunc <- mu + (dnorm(alpha) - dnorm(beta)) / Z * sigma
prob_trunc <- (pnorm(xi) - pnorm(alpha)) / Z
# Calculate the sum of squared differences
error <- (mean_trunc - desired_mean)^2 + (prob_trunc - desired_prob)^2
return(error)
}
# Optimize the parameters
result <- optim(initial_guess, objective_function,
control = list(maxit=maxit))
# Check for convergence or failure
if (result$convergence != 0) {
warning("Optimization did not converge.")
}
if (verbose) {
print(result)
}
# Extract the optimal parameters
optimal_mu <- result$par[1]
optimal_sigma <- result$par[2]
return(list(mu = optimal_mu, sigma = optimal_sigma))
}
solve_truncated_normal(10, 1, 0.2, maxit = 100000, verbose = T)
custom_optim <- function(par, fn, ..., max_iter = 1000) {
iter <- 0
sum_obj <- Inf  # Initialize sum of objective function values
while (sum_obj > 0 && iter < max_iter) {
# Call optim with Nelder-Mead method
result <- optim(par, fn, ..., method = "Nelder-Mead", control = list(maxit = 1))
# Update parameters and increment iteration count
par <- result$par
iter <- iter + 1
# Calculate sum of objective function values (example sum here is for illustration)
sum_obj <- sum(result$value)
# Print some progress information if needed
cat("Iteration:", iter, "Sum of objective values:", sum_obj, "\n")
}
return(result)
}
custom_optim <- function(par, fn, ..., max_iter = 1000) {
iter <- 0
sum_obj <- Inf  # Initialize sum of objective function values
while (sum_obj > 0 && iter < max_iter) {
# Call optim with Nelder-Mead method
result <- optim(par, fn, ..., method = "Nelder-Mead", control = list(maxit = 1))
# Update parameters and increment iteration count
par <- result$par
iter <- iter + 1
# Calculate sum of objective function values (example sum here is for illustration)
sum_obj <- sum(result$value)
# Print some progress information if needed
cat("Iteration:", iter, "Sum of objective values:", sum_obj, "\n")
}
return(result)
}
solve_truncated_normal2 <- function(desired_mean, x_value, desired_prob, a = 0,
b = Inf, initial_guess=c(desired_mean, 1), maxit=1000,
verbose=FALSE) {
"
This function solves for the parameters (mean and standard deviation) of a truncated normal
distribution such that the distribution aligns with a given desired mean and the cumulative
probability at a specific value.
Args:
desired_mean (numeric): The desired mean E[X] of the truncated normal distribution.
desired_prob (numeric): The desired cumulative probability P(X <= x_value) of the truncated normal distribution.
x_value (numeric): The value x for which the cumulative probability is specified.
a (numeric, optional): The lower bound of the truncation interval. Default is 0.
b (numeric, optional): The upper bound of the truncation interval. Default is Inf.
Initial_guess: The initial guess for the parameters used for optimizing. Default
is mean being the desired mean and sd being 1.
maxit: The maximum number of iterations allowed for optim. See also ?optim.
Returns:
list: A list containing the optimal mean (mu) and standard deviation (sigma) of the truncated normal distribution.
Useful for when defining prior distributions in Bayesian analysis, where you have a desired mean
and a specific belief about the probability of the parameter being at most x.
"
# Check for logical consistency and edge cases
if (a >= b) {
stop("Error: Lower bound 'a' must be less than upper bound 'b'.")
}
if (desired_mean <= a || desired_mean >= b) {
stop("Error: Desired mean must be within the bounds [a, b].")
}
if (desired_prob <= 0 || desired_prob >= 1) {
stop("Error: Desired probability must be between 0 and 1.")
}
if (x_value <= a || x_value >= b) {
stop("Error: x_value must be within the bounds [a, b].")
}
# Define the objective function to minimize
objective_function <- function(params) {
mu <- params[1]
sigma <- params[2]
# Penalize if parameters go out of bounds
if (mu <= a || mu >= b || sigma <= 0) {
return(Inf)
}
# Following syntax given on https://en.wikipedia.org/wiki/Truncated_normal_distribution
xi <- (x_value - mu) / sigma
alpha <- (a - mu) / sigma
beta <- (b - mu) / sigma
Z <- pnorm(beta) - pnorm(alpha)
mean_trunc <- mu + (dnorm(alpha) - dnorm(beta)) / Z * sigma
prob_trunc <- (pnorm(xi) - pnorm(alpha)) / Z
# Calculate the sum of squared differences
error <- (mean_trunc - desired_mean)^2 + (prob_trunc - desired_prob)^2
return(error)
}
# Optimize the parameters
result <- custom_optim(initial_guess, objective_function)
# Check for convergence or failure
if (result$convergence != 0) {
warning("Optimization did not converge.")
}
if (verbose) {
print(result)
}
# Extract the optimal parameters
optimal_mu <- result$par[1]
optimal_sigma <- result$par[2]
return(list(mu = optimal_mu, sigma = optimal_sigma))
}
solve_truncated_normal2(10, 1, 0.2, maxit = 100000, verbose = T)
solve_truncated_normal <- function(desired_mean, x_value, desired_prob, a = 0,
b = Inf, initial_guess=c(desired_mean, 1), maxit=1000,
verbose=FALSE) {
"
This function solves for the parameters (mean and standard deviation) of a truncated normal
distribution such that the distribution aligns with a given desired mean and the cumulative
probability at a specific value.
Args:
desired_mean (numeric): The desired mean E[X] of the truncated normal distribution.
desired_prob (numeric): The desired cumulative probability P(X <= x_value) of the truncated normal distribution.
x_value (numeric): The value x for which the cumulative probability is specified.
a (numeric, optional): The lower bound of the truncation interval. Default is 0.
b (numeric, optional): The upper bound of the truncation interval. Default is Inf.
Initial_guess: The initial guess for the parameters used for optimizing. Default
is mean being the desired mean and sd being 1.
maxit: The maximum number of iterations allowed for optim. See also ?optim.
Returns:
list: A list containing the optimal mean (mu) and standard deviation (sigma) of the truncated normal distribution.
Useful for when defining prior distributions in Bayesian analysis, where you have a desired mean
and a specific belief about the probability of the parameter being at most x.
"
# Check for logical consistency and edge cases
if (a >= b) {
stop("Error: Lower bound 'a' must be less than upper bound 'b'.")
}
if (desired_mean <= a || desired_mean >= b) {
stop("Error: Desired mean must be within the bounds [a, b].")
}
if (desired_prob <= 0 || desired_prob >= 1) {
stop("Error: Desired probability must be between 0 and 1.")
}
if (x_value <= a || x_value >= b) {
stop("Error: x_value must be within the bounds [a, b].")
}
# Define the objective function to minimize
objective_function <- function(params) {
mu <- params[1]
sigma <- params[2]
# Penalize if parameters go out of bounds
if (mu <= a || mu >= b || sigma <= 0) {
return(Inf)
}
# Following syntax given on https://en.wikipedia.org/wiki/Truncated_normal_distribution
xi <- (x_value - mu) / sigma
alpha <- (a - mu) / sigma
beta <- (b - mu) / sigma
Z <- pnorm(beta) - pnorm(alpha)
mean_trunc <- mu + (dnorm(alpha) - dnorm(beta)) / Z * sigma
prob_trunc <- (pnorm(xi) - pnorm(alpha)) / Z
# Calculate the sum of squared differences
error <- (mean_trunc - desired_mean)^2 + (prob_trunc - desired_prob)^2
return(error)
}
# Optimize the parameters
result <- optim(initial_guess, objective_function,
control = list(maxit=maxit))
# Check for convergence or failure
if (result$convergence != 0) {
warning("Optimization did not converge.")
}
if (verbose) {
print(result)
}
# Extract the optimal parameters
optimal_mu <- result$par[1]
optimal_sigma <- result$par[2]
return(list(mu = optimal_mu, sigma = optimal_sigma))
}
solve_truncated_normal(desired_mean = 2, x_value = 3, desired_prob = 1-0.2)
x <- solve_truncated_normal(desired_mean = 2, x_value = 3, desired_prob = 1-0.2)
round(x)
solve_truncated_normal(desired_mean = 0.5, x_value = 1, desired_prob = 0.9)
library(rstan)
?stan_model
?stan
library(outbreaks)
library(tidyverse)
library(truncnorm)
library(rstan)
library(gridExtra)
library(bayesplot)
library(adjustr)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
head(influenza_england_1978_school)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
solve_truncated_normal <- function(desired_mean, x_value, desired_prob, a = 0,
b = Inf, initial_guess=c(desired_mean, 1), maxit=1000,
verbose=FALSE) {
"
This function solves for the parameters (mean and standard deviation) of a truncated normal distribution such that the distribution aligns with a given desired mean and the cumulative probability at a specific value.
Args:
desired_mean (numeric): The desired mean E[X] of the truncated normal distribution.
desired_prob (numeric): The desired cumulative probability P(X <= x_value) of the truncated normal distribution.
x_value (numeric): The value x for which the cumulative probability is specified.
a (numeric, optional): The lower bound of the truncation interval. Default is 0.
b (numeric, optional): The upper bound of the truncation interval. Default is Inf.
Initial_guess: The initial guess for the parameters used for optimizing. Default
is mean being the desired mean and sd being 1.
maxit: The maximum number of iterations allowed for optim. See also ?optim.
Returns:
list: A list containing the optimal mean (mu) and standard deviation (sigma) of the truncated normal distribution.
"
# Check for logical consistency and edge cases
if (a >= b) {
stop("Error: Lower bound 'a' must be less than upper bound 'b'.")
}
if (desired_mean <= a || desired_mean >= b) {
stop("Error: Desired mean must be within the bounds [a, b].")
}
if (desired_prob <= 0 || desired_prob >= 1) {
stop("Error: Desired probability must be between 0 and 1.")
}
if (x_value <= a || x_value >= b) {
stop("Error: x_value must be within the bounds [a, b].")
}
# Define the objective function to minimize
objective_function <- function(params) {
mu <- params[1]
sigma <- params[2]
# Penalize if parameters go out of bounds
if (mu <= a || mu >= b || sigma <= 0) {
return(Inf)
}
# Following syntax given on https://en.wikipedia.org/wiki/Truncated_normal_distribution
xi <- (x_value - mu) / sigma
alpha <- (a - mu) / sigma
beta <- (b - mu) / sigma
Z <- pnorm(beta) - pnorm(alpha)
mean_trunc <- mu + (dnorm(alpha) - dnorm(beta)) / Z * sigma
prob_trunc <- (pnorm(xi) - pnorm(alpha)) / Z
# Calculate the sum of squared differences
error <- (mean_trunc - desired_mean)^2 + (prob_trunc - desired_prob)^2
return(error)
}
# Optimize the parameters
result <- optim(initial_guess, objective_function,
control = list(maxit=maxit))
# Check for convergence or failure
if (result$convergence != 0) {
warning("Optimization did not converge.")
}
if (verbose) {
print(result)
}
# Extract the optimal parameters
optimal_mu <- result$par[1]
optimal_sigma <- result$par[2]
return(list(mu = optimal_mu, sigma = optimal_sigma))
}
solve_truncated_normal(desired_mean = 2, x_value = 3, desired_prob = 1-0.2)
solve_truncated_normal(desired_mean = 0.5, x_value = 1, desired_prob = 0.9)
model <- stan_model(file = "C:/Users/bjark/Documents/Quarto website/Website/projects/bayesian_disease/stan_model.stan")
cases <- influenza_england_1978_school$in_bed
# total count
N <- 763;
# times
n_days <- length(cases)
t <- seq(0, n_days, by = 1)
t <- t[-1]
# initial conditions
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# data for Stan
data_sir <- list(n_days = n_days, y0 = y0, t = t, N = N,
cases = cases)
fit_sir_negbin <- stan(file = "C:/Users/bjark/Documents/Quarto website/Website/projects/bayesian_disease/stan_model.stan",
data = data_sir,
seed = 1405,)
pars=c('beta', 'gamma', "R0", "recovery_time")
print(fit_sir_negbin, pars = pars)
stan_dens(fit_sir_negbin, pars = pars, separate_chains = TRUE)
smr_pred <- cbind(as.data.frame(summary(
fit_sir_negbin, pars = "pred_cases",
probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(smr_pred) <- make.names(colnames(smr_pred)) # to remove % in the col names
ggplot(smr_pred, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill="green", alpha = 0.35) +
geom_line(mapping = aes(x = t, y = X50.), color="blue") +
geom_point(mapping = aes(y = cases)) +
labs(x = "Day", y = "Number of students in bed")
solve_truncated_normal(1, 2, 1-0.2)
solve_truncated_normal(3, 4, 1-0.2)
solve_truncated_normal(4, 5, 1-0.2)
1/2
1/0.5
1/0.33
1/3
1/(1/3)
solve_truncated_normal(1, 1.5, 0.9)
solve_truncated_normal(1/3, 0.75, 0.9)
solve_truncated_normal(1/4, 0.5, 0.9)
2.368781e-06
solve_truncated_normal(1/3, 0.5, 0.9)
solve_truncated_normal(1/3, 0.7, 0.9)
solve_truncated_normal(1/3, 0.5, 0.9)
library(truncnorm)
x <- rtruncnorm(10000, a=0, b=Inf, mean=2.368781e-06, sigma=0.3942182)
x <- rtruncnorm(10000, a=0, b=Inf, mean=2.368781e-06, sd=0.3942182)
mean(x)
solve_truncated_normal(1/3, 0.6, 0.9)
solve_truncated_normal(1/4, 0.5, 0.9)
solve_truncated_normal(1, 1.5, 0.9)
solve_truncated_normal(1/3, 0.6, 0.9)
solve_truncated_normal(1/4, 0.5, 0.9)
?make_spec
params = tidyr::crossing(df=1:10, infl=c(1, 1.5, 2))
params
make_spec(beta ~ normal(mu, sd), mu=c(1.6, 2.98, 4), sd=c(1.3, 1.2, 1.19))
spec_gamma = make_spec(beta ~ normal(mu, sd),
mu=c(1, 0.28, 0.088), sd=c(0.4, 0.24, 0.27))
spec_gamma = make_spec(beta ~ normal(mu, sd),
mu=c(1.6, 2.98, 4), sd=c(1.3, 1.2, 1.19))
adjusted_gamma = adjust_weights(spec_gamma, fit_sir_negbin)
spec_gamma = make_spec(beta ~ normal(mu, sd),
mu=c(1, 0.28, 0.088), sd=c(0.4, 0.24, 0.27))
adjusted_gamma = adjust_weights(spec_gamma, fit_sir_negbin)
summarize(adjusted_gamma, mean(gamma), var(gamma))
spec_plot(adjusted_gamma)
spec_plot(adjusted_gamma, post=gamma)
spec_plot(adjusted_gamma, by=mu, post=gamma)
spec_plot(adjusted_gamma, by=mu, post=gamma, only_mean = T)
solve_truncated_normal(1/4, 0.4, 0.9)
path <- "C:/Users/bjark/Documents/Quarto website/Website/projects/bayesian_disease/stan_model.stan"
path
file_path <- "C:/Users/bjark/Documents/Quarto website/Website/projects/bayesian_disease/stan_model.stan"
file_path
model <- stan_model(file = file_path)
