k <- 10^3
data <- data.frame(value = c(x,y),
group = factor(c(rep(1, n1), rep(2, n2)))
)
p_values_myfunc[i] <- test_func(value ~ group, data)$pvalue
}
k <- 10^3
n1 <- 4
n2 <- 5
p_values_myfunc <- rep(0, k)
for (i in 1:k) {
k <- 10^3
x <- rnorm(n1)
y <- rnorm(n2, 5, 5)
data <- data.frame(value = c(x,y),
group = factor(c(rep(1, n1), rep(2, n2)))
)
p_values_myfunc[i] <- test_func(value ~ group, data)$pvalue
}
mean(p_values_myfunc<0.05) # 0.5751
k <- 10^3
n1 <- 4
n2 <- 5
p_values_myfunc <- rep(0, k)
for (i in 1:k) {
k <- 10^3
x <- rnorm(n1)
y <- rnorm(n2, 0, 5)
data <- data.frame(value = c(x,y),
group = factor(c(rep(1, n1), rep(2, n2)))
)
p_values_myfunc[i] <- test_func(value ~ group, data)$pvalue
}
mean(p_values_myfunc<0.05)
library(rms)
plotCorrPrecision(rho=0, n=seq(10, 1000, length=100), ylim=c(0, .4), method='none')
?plotCorrPrecision
install.packages("selectiveInference")
library(selectiveInference)
set.seed(43)
n = 50
p = 10
sigma = 1
x = matrix(rnorm(n*p),n,p)
x = scale(x,TRUE,TRUE)
beta = c(3,2,rep(0,p-2))
y = x%*%beta + sigma*rnorm(n)
# first run glmnet
gfit = glmnet(x,y,standardize=FALSE)
# extract coef for a given lambda; note the 1/n factor!
# (and we don't save the intercept term)
lambda = .8
beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
# compute fixed lambda p-values and selection intervals
out = fixedLassoInf(x,y,beta,lambda,sigma=sigma)
out
gfit
summary(gfit)
dim(x)
?glmnet
gfit = glmnet(x,y,standardize=FALSE)
gfit
gfit$lambda
gfit$beta
lambda = .8
beta = coef(gfit, x=x, y=y, s=lambda/n, exact=TRUE)[-1]
beta
out = fixedLassoInf(x,y,beta,lambda,sigma=sigma)
out
?coxnet
install.packages("BNPmix")
library("BNPmix")
data(CPP, package = "BNPmix")
y <- CPP[CPP$hosp == 11, ]
DPprior <- PYcalibrate(Ek = 3, n = nrow(y), discount = 0)
DPprior
?PYcalibrate
prior <- list(strength = DPprior$strength, discount = 0)
library("BNPmix")
data(CPP, package = "BNPmix")
y <- CPP[CPP$hosp == 11, ]
DPprior <- PYcalibrate(Ek = 3, n = nrow(y), discount = 0)
DPprior
prior <- list(strength = DPprior$strength, discount = 0)
mcmc <- list(niter = 5000, nburn = 4000)
output <- list(grid = seq(30, 46, length.out = 100), out_type =)
library("BNPmix")
data(CPP, package = "BNPmix")
y <- CPP[CPP$hosp == 11, ]
DPprior <- PYcalibrate(Ek = 3, n = nrow(y), discount = 0)
DPprior
prior <- list(strength = DPprior$strength, discount = 0)
mcmc <- list(niter = 5000, nburn = 4000)
output <- list(grid = seq(30, 46, length.out = 100), out_type = "FULL")
set.seed(42)
fit1 <- PYdensity(y = y$gest, mcmc = mcmc, prior = prior, output = output)
print(fit1)
plot(fit1, show_hist = TRUE, xlab = "gestational age")
plot(fit1, show_hist = TRUE, xlab = "gestational age")
plot(fit1, band = FALSE, show_clust = TRUE, xlab = "gestational age")
install.packages(c("backports", "bbotk", "beepr", "betareg", "BiasedUrn", "biglm", "BiocManager", "bookdown", "brio", "broom", "cachem", "cli", "cmprsk", "collapse", "crayon", "cubature", "DBI", "digest", "DoubleML", "downlit", "emmeans", "epiR", "equatags", "estimability", "evaluate", "evd", "farver", "fastmap", "fixest", "flextable", "foghorn", "fs", "gbm", "gee", "geepack", "ggplot2", "ggpp", "gtable", "hardhat", "highr", "Hmisc", "htmltools", "httr2", "knitr", "labelled", "lavaan", "leaps", "lhs", "lme4", "loo", "magick", "markdown", "mclust", "MCMCglmm", "minqa", "mlbench", "mlr3", "mlr3learners", "mlr3misc", "mlr3tuning", "modeldata", "modeltests", "mvtnorm", "nlme", "nloptr", "officer", "openssl", "paradox", "pbkrtest", "pkgdown", "pkgload", "PKI", "polspline", "posterior", "prodlim", "promises", "ps", "psych", "quantreg", "QuickJSR", "ragg", "randomNames", "RcppArmadillo", "RcppParallel", "recipes", "reprex", "rlang", "rmarkdown", "rms", "robustbase", "roxygen2", "rsconnect", "RSQLite", "santoku", "SimDesign", "sp", "SparseM", "spatialreg", "spData", "spdep", "splines2", "StanHeaders", "stars", "stringi", "stringmagic", "survival", "systemfonts", "tables", "terra", "testthat", "textshaping", "tinytex", "tseries", "tune", "ucminf", "urca", "webfakes", "wk", "xfun", "XML", "xopen", "xslt", "xts", "yaml"))
1.01
require(rms)
options(prType='html')
set.seed(1)
n <- 200
d <- data.frame(age = rnorm(n, 50, 10),
sex = sample(c('f', 'm'), n, TRUE),
x1  = runif(n),
x2  = runif(n),
x3  = runif(n),
x4  = runif(n),
x5  = runif(n)   )
mis <- function(x) ifelse(runif(n) < 0.2, NA, x)
d <- transform(d,
y = 0.07 * (age - 50) + (sex == 'f') + rnorm(n),
age = mis(age),
sex = mis(sex) )
fracmiss <- with(d, mean(is.na(age) | is.na(sex)))
# Do inefficient complete case analysis
f <- ols(y ~ age + sex + x1 + x2 + x3 + x4 + x5, data=d)
f
?aregImpute
a <- aregImpute(~ y + age + sex + x1 + x2 + x3 + x4 + x5,
data=d, n.impute=40, pr=FALSE)   # 2s
g <- function(fit)
list(validate  = validate(fit, B=100),
calibrate = calibrate(fit, B=100) )
f <- fit.mult.impute(y ~ age + sex + x1 + x2 + x3 + x4 + x5,
ols, a, data=d, pr=FALSE,
fun=g, fitargs=list(x=TRUE, y=TRUE))   # 3s
f
?fit.mult.impute
f
processMI(f, 'validate')
?processMI
processMI(f, 'validate')
cal <- processMI(f, 'calibrate', nind=3)
f
processMI(f, 'validate')
f
f$coefficients
coef <-  f$coefficients
coef
coef[1]
c(coef)
as.numeric(coef)
processMI(f, 'validate')
x <- c(1,2)
coef[-1] <- coef[-1]*0.9505
g <- function(fit)
list(validate  = validate(fit, B=100),
calibrate = calibrate(fit, B=100) )
f <- fit.mult.impute(y ~ age + sex + x1 + x2 + x3 + x4 + x5,
ols, a, data=d, pr=FALSE,
fun=g, fitargs=list(x=TRUE, y=TRUE))   # 3s
f
processMI(f, 'validate')
cal <- processMI(f, 'calibrate', nind=3)
coef <-  as.numeric(f$coefficients)
coef[1] <- coef[1]+0.0249
coef[-1] <- coef[-1]*0.9505
cal <- processMI(f, 'calibrate', nind=3)
g <- function(fit)
list(validate  = validate(fit, B=100),
calibrate = calibrate(fit, B=100) )
f <- fit.mult.impute(y ~ age + sex + x1 + x2 + x3 + x4 + x5,
ols, a, data=d, pr=FALSE,
fun=g, fitargs=list(x=TRUE, y=TRUE))   # 3s
f
processMI(f, 'validate')
cal <- processMI(f, 'calibrate', nind=3)
test <- f
coef <-  as.numeric(test$coefficients)
coef[1] <- coef[1]+0.0257
coef[-1] <- coef[-1]*0.9482
processMI(test, 'validate')
caltest <- processMI(test, 'calibrate', nind=3)
g <- function(fit)
list(validate  = validate(fit, B=100),
calibrate = calibrate(fit, B=100) )
f <- fit.mult.impute(y ~ age + sex + x1 + x2 + x3 + x4 + x5,
ols, a, data=d, pr=FALSE,
fun=g, fitargs=list(x=TRUE, y=TRUE))   # 3s
test <- f
coef <-  as.numeric(test$coefficients)
coef[1] <- coef[1]+0.0257
coef[-1] <- coef[-1]*0.9482
processMI(test, 'validate')
caltest <- processMI(test, 'calibrate', nind=3)
processMI
g <- function(fit)
list(validate  = validate(fit, B=100),
calibrate = calibrate(fit, B=100) )
f <- fit.mult.impute(y ~ age + sex + x1 + x2 + x3 + x4 + x5,
ols, a, data=d, pr=FALSE,
fun=g)   # 3s
g <- function(fit)
list(validate  = validate(fit, B=100),
calibrate = calibrate(fit, B=100) )
f <- fit.mult.impute(y ~ age + sex + x1 + x2 + x3 + x4 + x5,
ols, a, data=d, pr=FALSE,
fitargs=list(x=TRUE, y=TRUE))   # 3s
f
g(f)
processMI(f, 'validate')
?calibrate
calibrate
methods(calibrate)
getAnywhere(calibrate.default)
?predab.resample
install.packages("chattr")
library(chatrrr)
library(chattr)
require(Hmisc)
require(data.table)
require(ggplot2)
options(prType='html', datatable.print.topn=50)
if(file.exists('nfl.rds')) d <- readRDS('nfl.rds') else {
require(nflreadr)
d <- load_pbp(2008:2023)
d <- as.data.table(d)
w <- d[, .(game_id, game_date, game_seconds_remaining,
home_score, away_score,
total_home_score, total_away_score, home_wp)]
w <- upData(w,
rename=.q(game_id=id, game_date=date,
game_seconds_remaining=timeleft,
home_score=final_home,
away_score=final_away,
total_home_score=home,
total_away_score=away,
home_wp=home_prob),
time=(3600 - timeleft) / 60,
date=as.Date(date),
units=c(timeleft='seconds', time='minutes'),
labels=c(time='Elapsed Time',
final_home='Final Score for Home Team',
final_away='Final Score for Away Team',
home='Home Team Current Score',
away='Away Team Current Score',
home_prob='Probability Home Team Wins') )
d <- w[! is.na(timeleft)]
saveRDS(w, 'nfl.rds', compress='xz')
}
install.packages(nflreadr)
install.packages("nflreadr")
require(Hmisc)
require(data.table)
require(ggplot2)
options(prType='html', datatable.print.topn=50)
if(file.exists('nfl.rds')) d <- readRDS('nfl.rds') else {
require(nflreadr)
d <- load_pbp(2008:2023)
d <- as.data.table(d)
w <- d[, .(game_id, game_date, game_seconds_remaining,
home_score, away_score,
total_home_score, total_away_score, home_wp)]
w <- upData(w,
rename=.q(game_id=id, game_date=date,
game_seconds_remaining=timeleft,
home_score=final_home,
away_score=final_away,
total_home_score=home,
total_away_score=away,
home_wp=home_prob),
time=(3600 - timeleft) / 60,
date=as.Date(date),
units=c(timeleft='seconds', time='minutes'),
labels=c(time='Elapsed Time',
final_home='Final Score for Home Team',
final_away='Final Score for Away Team',
home='Home Team Current Score',
away='Away Team Current Score',
home_prob='Probability Home Team Wins') )
d <- w[! is.na(timeleft)]
saveRDS(w, 'nfl.rds', compress='xz')
}
a <- d[final_home <= final_away]
a
a$home_prob
?nflreadr
nt   <- 1 : 120
prop <- numeric(120)
g <- function(time, diff) {
# Look up score differences at specific times
diffs <- approx(time, diff, xout=times, method='constant', rule=2)$y
1 * any(diffs >= 10)
}
schedule <- list(30, c(20, 40), c(15, 30, 45))
if(file.exists('prop.rds')) prop <- readRDS('prop.rds') else {
for(i in 1 : 120) {
times <- if(i < 4) schedule[[i]] else seq(1, 59, length=i)
b <- a[, .(any10=g(time, home - away)), by=id]
prop[i] <- mean(b$any10)
}
saveRDS(prop, 'prop.rds')
}
install.packages("rmsb ")
install.packages("rmsb")
library(rmsb)
?blrm
install.packages("vglm")
install.packages("vgam")
install.packages("VGAM")
install.packages("lifecycle")
1+1
install.packages("priorsense")
library(priorsense)
vignette(priorsense)
?vignette
vignette(package="priorsense")
browseVignettes("priorsense")
?powerscale_plot_dens
library(outbreaks)
library(tidyverse)
library(truncnorm)
library(rstan)
library(gridExtra)
library(bayesplot)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
head(influenza_england_1978_school)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
cases <- influenza_england_1978_school$in_bed
# total count
N <- 763;
# times
n_days <- length(cases)
t <- seq(0, n_days, by = 1)
t0 = 0
t <- t[-1]
# initial conditions
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# data for Stan
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N,
cases = cases)
fit_sir_negbin <- sampling(compiled_model,
data = data_sir,
seed = 0)
pars=c('beta', 'gamma', "R0", "recovery_time")
print(fit_sir_negbin, pars = pars)
stan_dens(fit_sir_negbin, pars = pars, separate_chains = TRUE)
smr_pred <- cbind(as.data.frame(summary(
fit_sir_negbin, pars = "pred_cases",
probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(smr_pred) <- make.names(colnames(smr_pred)) # to remove % in the col names
ggplot(smr_pred, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill="green", alpha = 0.35) +
geom_line(mapping = aes(x = t, y = X50.), color="blue") +
geom_point(mapping = aes(y = cases)) +
labs(x = "Day", y = "Number of students in bed")
# Plot posterior
posterior <- as.matrix(fit_sir_negbin)
plot_title <- ggtitle("Posterior distributions",
"with medians and 90% intervals")
mcmc_areas(posterior,
pars = pars,
prob = 0.9) + plot_title
?powerscale_sensitivity
powerscale_sensitivity(fit_sir_negbin, variable=pars)
typeof(fit_sir_negbin)
fit_sir_negbin
pars
powerscale_plot_dens(fit_sir_negbin, variable="beta", facet_rows = "variable")
?example_powerscale_model
powerscale_plot_dens(compiled_model, variable="beta", facet_rows = "variable")
normal_model <- example_powerscale_model("univariate_normal")
fit <- stan(
model_code = normal_model$model_code,
data = normal_model$data,
refresh = FALSE,
seed = 123
)
powerscale_sensitivity(fit, variable = c("mu", "sigma"))
powerscale_plot_dens(fit, variable = "mu", facet_rows = "variable")
normal_model
?samplinf
?sampling
compiled_model
?stan
cmdstan_path()
library("rstan")
cmdstan_path()
library("cmdstanr")
cmdstan_path()
getwd
getwd()
?cmdstan_path
?set_cmdstan_path(path)
set_cmdstan_path(getwd())
set_cmdstan_path("C:/Users/bjark/Documents/Quarto website/Website/projects/bayesian_disease")
?stan
test <- stan(model_code = sir_negbin_model,
data = data_sir)
?stan
?cmdstan_model
test <- cmdstan_model(file = sir_negbin_model)
?set_cmdstan_path
cmdstan_path()
set_cmdstan_path("C:/Users/bjark/Documents/.cmdstan/cmdstan-2.34.1")
library(outbreaks)
library(tidyverse)
library(truncnorm)
library(rstan)
library(gridExtra)
library(bayesplot)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
head(influenza_england_1978_school)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
cases <- influenza_england_1978_school$in_bed
# total count
N <- 763;
# times
n_days <- length(cases)
t <- seq(0, n_days, by = 1)
t0 = 0
t <- t[-1]
# initial conditions
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# data for Stan
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N,
cases = cases)
fit_sir_negbin <- sampling(compiled_model,
data = data_sir,
seed = 0)
test <- cmdstan_model(file = sir_negbin_model)
test <- cmdstan_model(file = sir_negbin_model)
library(outbreaks)
library(tidyverse)
library(truncnorm)
library(rstan)
library(gridExtra)
library(bayesplot)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
head(influenza_england_1978_school)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
cases <- influenza_england_1978_school$in_bed
# total count
N <- 763;
# times
n_days <- length(cases)
t <- seq(0, n_days, by = 1)
t0 = 0
t <- t[-1]
# initial conditions
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# data for Stan
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N,
cases = cases)
fit_sir_negbin <- sampling(compiled_model,
data = data_sir,
seed = 0)
fit_sir_negbin
typeof(fit_sir_negbin)
typeof(fit)
fit
powerscale_sensitivity(fit_sir_negbin)
test <- cmdstan_model(stan_file = sir_negbin_model)
test <- cmdstan_model(stan_file = "sir_negbin_model.stan")
cmdstan_path()
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.34.1/sir_negbin_model.stan")
test <- cmdstan_model(stan_file = sir_negbin_model.sir)
test <- cmdstan_model(stan_file = sir_negbin_model)
test <- cmdstan_model(stan_file = "sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.34.1/sir_negbin_model.stan")
test <- cmdstan_model(stan_file = sir_negbin_model.stan)
test <- cmdstan_model(stan_file = "sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.34.1/sir_negbin_model.stan")
??install_cmdstan()
?install_cmdstan()
?install_cmdstan()
install_cmdstan()
cmdstan_make_local(cpp_options = cmdstan_make_local(dir = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.34.1"))
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.34.1/sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/sir_negbin_model.stan")
test
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/new_sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/new_sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/new_sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/new_sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/new_sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/new_sir_negbin_model.stan")
test <- cmdstan_model(stan_file = "C:/Users/bjark/Documents/.cmdstan/cmdstan-2.35.0/new_sir_negbin_model.stan")
